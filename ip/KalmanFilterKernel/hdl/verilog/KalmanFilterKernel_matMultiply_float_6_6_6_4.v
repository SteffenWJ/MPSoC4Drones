// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KalmanFilterKernel_matMultiply_float_6_6_6_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mat_in_L_address0,
        mat_in_L_ce0,
        mat_in_L_q0,
        mat_out_address0,
        mat_out_ce0,
        mat_out_we0,
        mat_out_d0,
        L
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] mat_in_L_address0;
output   mat_in_L_ce0;
input  [31:0] mat_in_L_q0;
output  [5:0] mat_out_address0;
output   mat_out_ce0;
output   mat_out_we0;
output  [31:0] mat_out_d0;
input  [2:0] L;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_in_L_ce0;
reg mat_out_ce0;
reg mat_out_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] H_T_address0;
reg    H_T_ce0;
wire   [31:0] H_T_q0;
wire   [2:0] add_ln13_fu_145_p2;
reg   [2:0] add_ln13_reg_305;
wire    ap_CS_fsm_state2;
wire   [5:0] empty_fu_172_p2;
reg   [5:0] empty_reg_313;
wire   [0:0] icmp_ln13_fu_155_p2;
wire   [5:0] empty_32_fu_198_p2;
reg   [5:0] empty_32_reg_318;
wire   [1:0] add_ln17_fu_204_p2;
reg   [1:0] add_ln17_reg_323;
wire    ap_CS_fsm_state3;
wire   [4:0] zext_ln17_fu_210_p1;
reg   [4:0] zext_ln17_reg_328;
reg   [5:0] mat_out_addr_reg_336;
wire   [0:0] icmp_ln17_fu_218_p2;
wire   [2:0] add_ln23_fu_234_p2;
reg   [2:0] add_ln23_reg_341;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln23_fu_248_p2;
wire   [0:0] icmp_ln27_fu_288_p2;
reg   [0:0] icmp_ln27_reg_359;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] mul_reg_374;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_294_p3;
wire    ap_CS_fsm_state11;
reg   [2:0] i_reg_94;
reg   [1:0] k_reg_105;
reg   [2:0] j_reg_116;
reg   [31:0] add1913_reg_127;
wire  signed [63:0] sext_ln20_fu_229_p1;
wire   [63:0] zext_ln27_fu_259_p1;
wire   [63:0] zext_ln27_5_fu_283_p1;
wire   [4:0] p_shl2_fu_160_p3;
wire   [5:0] p_shl2_cast_fu_168_p1;
wire   [5:0] zext_ln13_fu_151_p1;
wire   [3:0] p_shl1_fu_186_p3;
wire   [5:0] p_shl_fu_178_p3;
wire   [5:0] p_shl1_cast_fu_194_p1;
wire   [5:0] zext_ln17_2_fu_214_p1;
wire   [5:0] add_ln20_fu_224_p2;
wire   [5:0] zext_ln23_1_fu_244_p1;
wire   [5:0] add_ln27_fu_254_p2;
wire   [4:0] shl_ln_fu_264_p3;
wire   [4:0] zext_ln23_fu_240_p1;
wire   [4:0] sub_ln27_fu_272_p2;
wire   [4:0] add_ln27_4_fu_278_p2;
wire    ap_CS_fsm_state9;
reg    grp_fu_294_in_valid;
reg   [10:0] ap_NS_fsm;
wire   [31:0] grp_fu_294_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

KalmanFilterKernel_matMultiply_float_6_6_6_4_H_T #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
H_T_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(H_T_address0),
    .ce0(H_T_ce0),
    .q0(H_T_q0)
);

KalmanFilterKernel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mat_in_L_q0),
    .din1(H_T_q0),
    .ce(1'b1),
    .dout(grp_fu_139_p2)
);

KalmanFilterKernel_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(mul_reg_374),
    .in_last(icmp_ln27_reg_359),
    .in_valid(grp_fu_294_in_valid),
    .out_data(grp_fu_294_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add1913_reg_127 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        add1913_reg_127 <= grp_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_94 <= 3'd0;
    end else if (((icmp_ln17_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_94 <= add_ln13_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_116 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_116 <= add_ln23_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_105 <= 2'd0;
    end else if (((icmp_ln23_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_reg_105 <= add_ln17_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln13_reg_305 <= add_ln13_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln17_reg_323 <= add_ln17_fu_204_p2;
        zext_ln17_reg_328[1 : 0] <= zext_ln17_fu_210_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln23_reg_341 <= add_ln23_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_32_reg_318[5 : 1] <= empty_32_fu_198_p2[5 : 1];
        empty_reg_313 <= empty_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln27_reg_359 <= icmp_ln27_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mat_out_addr_reg_336 <= sext_ln20_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_reg_374 <= grp_fu_139_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        H_T_ce0 = 1'b1;
    end else begin
        H_T_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln13_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_294_in_valid = 1'b1;
    end else begin
        grp_fu_294_in_valid = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mat_in_L_ce0 = 1'b1;
    end else begin
        mat_in_L_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mat_out_ce0 = 1'b1;
    end else begin
        mat_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        mat_out_we0 = 1'b1;
    end else begin
        mat_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln23_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_T_address0 = zext_ln27_5_fu_283_p1;

assign add_ln13_fu_145_p2 = (i_reg_94 + 3'd1);

assign add_ln17_fu_204_p2 = (k_reg_105 + 2'd1);

assign add_ln20_fu_224_p2 = (zext_ln17_2_fu_214_p1 + empty_reg_313);

assign add_ln23_fu_234_p2 = (j_reg_116 + 3'd1);

assign add_ln27_4_fu_278_p2 = (sub_ln27_fu_272_p2 + zext_ln17_reg_328);

assign add_ln27_fu_254_p2 = (zext_ln23_1_fu_244_p1 + empty_32_reg_318);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_32_fu_198_p2 = (p_shl_fu_178_p3 - p_shl1_cast_fu_194_p1);

assign empty_fu_172_p2 = (p_shl2_cast_fu_168_p1 - zext_ln13_fu_151_p1);

assign icmp_ln13_fu_155_p2 = ((i_reg_94 == L) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_218_p2 = ((k_reg_105 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_248_p2 = ((j_reg_116 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_288_p2 = ((add_ln23_fu_234_p2 == 3'd6) ? 1'b1 : 1'b0);

assign mat_in_L_address0 = zext_ln27_fu_259_p1;

assign mat_out_address0 = mat_out_addr_reg_336;

assign mat_out_d0 = add1913_reg_127;

assign p_shl1_cast_fu_194_p1 = p_shl1_fu_186_p3;

assign p_shl1_fu_186_p3 = {{i_reg_94}, {1'd0}};

assign p_shl2_cast_fu_168_p1 = p_shl2_fu_160_p3;

assign p_shl2_fu_160_p3 = {{i_reg_94}, {2'd0}};

assign p_shl_fu_178_p3 = {{i_reg_94}, {3'd0}};

assign sext_ln20_fu_229_p1 = $signed(add_ln20_fu_224_p2);

assign shl_ln_fu_264_p3 = {{j_reg_116}, {2'd0}};

assign sub_ln27_fu_272_p2 = (shl_ln_fu_264_p3 - zext_ln23_fu_240_p1);

assign zext_ln13_fu_151_p1 = i_reg_94;

assign zext_ln17_2_fu_214_p1 = k_reg_105;

assign zext_ln17_fu_210_p1 = k_reg_105;

assign zext_ln23_1_fu_244_p1 = j_reg_116;

assign zext_ln23_fu_240_p1 = j_reg_116;

assign zext_ln27_5_fu_283_p1 = add_ln27_4_fu_278_p2;

assign zext_ln27_fu_259_p1 = add_ln27_fu_254_p2;

always @ (posedge ap_clk) begin
    empty_32_reg_318[0] <= 1'b0;
    zext_ln17_reg_328[4:2] <= 3'b000;
end

endmodule //KalmanFilterKernel_matMultiply_float_6_6_6_4
